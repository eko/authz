// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api.proto

package authz

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Attribute with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Attribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attribute with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttributeMultiError, or nil
// if none found.
func (m *Attribute) ValidateAll() error {
	return m.validate(true)
}

func (m *Attribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return AttributeMultiError(errors)
	}

	return nil
}

// AttributeMultiError is an error wrapping multiple validation errors returned
// by Attribute.ValidateAll() if the designated constraints aren't met.
type AttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttributeMultiError) AllErrors() []error { return m }

// AttributeValidationError is the validation error returned by
// Attribute.Validate if the designated constraints aren't met.
type AttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeValidationError) ErrorName() string { return "AttributeValidationError" }

// Error satisfies the builtin error interface
func (e AttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeValidationError{}

// Validate checks the field values on AuthenticateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticateRequestMultiError, or nil if none found.
func (m *AuthenticateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	if len(errors) > 0 {
		return AuthenticateRequestMultiError(errors)
	}

	return nil
}

// AuthenticateRequestMultiError is an error wrapping multiple validation
// errors returned by AuthenticateRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthenticateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticateRequestMultiError) AllErrors() []error { return m }

// AuthenticateRequestValidationError is the validation error returned by
// AuthenticateRequest.Validate if the designated constraints aren't met.
type AuthenticateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticateRequestValidationError) ErrorName() string {
	return "AuthenticateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticateRequestValidationError{}

// Validate checks the field values on AuthenticateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticateResponseMultiError, or nil if none found.
func (m *AuthenticateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Type

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return AuthenticateResponseMultiError(errors)
	}

	return nil
}

// AuthenticateResponseMultiError is an error wrapping multiple validation
// errors returned by AuthenticateResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthenticateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticateResponseMultiError) AllErrors() []error { return m }

// AuthenticateResponseValidationError is the validation error returned by
// AuthenticateResponse.Validate if the designated constraints aren't met.
type AuthenticateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticateResponseValidationError) ErrorName() string {
	return "AuthenticateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticateResponseValidationError{}

// Validate checks the field values on Check with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Check) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Check with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CheckMultiError, or nil if none found.
func (m *Check) ValidateAll() error {
	return m.validate(true)
}

func (m *Check) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Check_Principal_Pattern.MatchString(m.GetPrincipal()) {
		err := CheckValidationError{
			field:  "Principal",
			reason: "value does not match regex pattern \"[a-z0-9-_\\\\./*]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Check_ResourceKind_Pattern.MatchString(m.GetResourceKind()) {
		err := CheckValidationError{
			field:  "ResourceKind",
			reason: "value does not match regex pattern \"[a-z0-9-_\\\\./*]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ResourceValue

	// no validation rules for Action

	if len(errors) > 0 {
		return CheckMultiError(errors)
	}

	return nil
}

// CheckMultiError is an error wrapping multiple validation errors returned by
// Check.ValidateAll() if the designated constraints aren't met.
type CheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckMultiError) AllErrors() []error { return m }

// CheckValidationError is the validation error returned by Check.Validate if
// the designated constraints aren't met.
type CheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckValidationError) ErrorName() string { return "CheckValidationError" }

// Error satisfies the builtin error interface
func (e CheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckValidationError{}

var _Check_Principal_Pattern = regexp.MustCompile("[a-z0-9-_\\./*]+")

var _Check_ResourceKind_Pattern = regexp.MustCompile("[a-z0-9-_\\./*]+")

// Validate checks the field values on CheckAnswer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckAnswer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAnswer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckAnswerMultiError, or
// nil if none found.
func (m *CheckAnswer) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAnswer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Principal

	// no validation rules for ResourceKind

	// no validation rules for ResourceValue

	// no validation rules for Action

	// no validation rules for IsAllowed

	if len(errors) > 0 {
		return CheckAnswerMultiError(errors)
	}

	return nil
}

// CheckAnswerMultiError is an error wrapping multiple validation errors
// returned by CheckAnswer.ValidateAll() if the designated constraints aren't met.
type CheckAnswerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAnswerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAnswerMultiError) AllErrors() []error { return m }

// CheckAnswerValidationError is the validation error returned by
// CheckAnswer.Validate if the designated constraints aren't met.
type CheckAnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAnswerValidationError) ErrorName() string { return "CheckAnswerValidationError" }

// Error satisfies the builtin error interface
func (e CheckAnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAnswer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAnswerValidationError{}

// Validate checks the field values on CheckRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckRequestMultiError, or
// nil if none found.
func (m *CheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChecks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckRequestValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckRequestValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckRequestValidationError{
					field:  fmt.Sprintf("Checks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckRequestMultiError(errors)
	}

	return nil
}

// CheckRequestMultiError is an error wrapping multiple validation errors
// returned by CheckRequest.ValidateAll() if the designated constraints aren't met.
type CheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckRequestMultiError) AllErrors() []error { return m }

// CheckRequestValidationError is the validation error returned by
// CheckRequest.Validate if the designated constraints aren't met.
type CheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRequestValidationError) ErrorName() string { return "CheckRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRequestValidationError{}

// Validate checks the field values on CheckResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckResponseMultiError, or
// nil if none found.
func (m *CheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChecks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckResponseValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckResponseValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckResponseValidationError{
					field:  fmt.Sprintf("Checks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckResponseMultiError(errors)
	}

	return nil
}

// CheckResponseMultiError is an error wrapping multiple validation errors
// returned by CheckResponse.ValidateAll() if the designated constraints
// aren't met.
type CheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResponseMultiError) AllErrors() []error { return m }

// CheckResponseValidationError is the validation error returned by
// CheckResponse.Validate if the designated constraints aren't met.
type CheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResponseValidationError) ErrorName() string { return "CheckResponseValidationError" }

// Error satisfies the builtin error interface
func (e CheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResponseValidationError{}

// Validate checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Policy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PolicyMultiError, or nil if none found.
func (m *Policy) ValidateAll() error {
	return m.validate(true)
}

func (m *Policy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return PolicyMultiError(errors)
	}

	return nil
}

// PolicyMultiError is an error wrapping multiple validation errors returned by
// Policy.ValidateAll() if the designated constraints aren't met.
type PolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyMultiError) AllErrors() []error { return m }

// PolicyValidationError is the validation error returned by Policy.Validate if
// the designated constraints aren't met.
type PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyValidationError) ErrorName() string { return "PolicyValidationError" }

// Error satisfies the builtin error interface
func (e PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyValidationError{}

// Validate checks the field values on PolicyCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolicyCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyCreateRequestMultiError, or nil if none found.
func (m *PolicyCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_PolicyCreateRequest_Id_Pattern.MatchString(m.GetId()) {
		err := PolicyCreateRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"[a-z0-9-_\\\\./*]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PolicyCreateRequestMultiError(errors)
	}

	return nil
}

// PolicyCreateRequestMultiError is an error wrapping multiple validation
// errors returned by PolicyCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type PolicyCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyCreateRequestMultiError) AllErrors() []error { return m }

// PolicyCreateRequestValidationError is the validation error returned by
// PolicyCreateRequest.Validate if the designated constraints aren't met.
type PolicyCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyCreateRequestValidationError) ErrorName() string {
	return "PolicyCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyCreateRequestValidationError{}

var _PolicyCreateRequest_Id_Pattern = regexp.MustCompile("[a-z0-9-_\\./*]+")

// Validate checks the field values on PolicyCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolicyCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyCreateResponseMultiError, or nil if none found.
func (m *PolicyCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyCreateResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyCreateResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyCreateResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicyCreateResponseMultiError(errors)
	}

	return nil
}

// PolicyCreateResponseMultiError is an error wrapping multiple validation
// errors returned by PolicyCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type PolicyCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyCreateResponseMultiError) AllErrors() []error { return m }

// PolicyCreateResponseValidationError is the validation error returned by
// PolicyCreateResponse.Validate if the designated constraints aren't met.
type PolicyCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyCreateResponseValidationError) ErrorName() string {
	return "PolicyCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyCreateResponseValidationError{}

// Validate checks the field values on PolicyGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PolicyGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyGetRequestMultiError, or nil if none found.
func (m *PolicyGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return PolicyGetRequestMultiError(errors)
	}

	return nil
}

// PolicyGetRequestMultiError is an error wrapping multiple validation errors
// returned by PolicyGetRequest.ValidateAll() if the designated constraints
// aren't met.
type PolicyGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyGetRequestMultiError) AllErrors() []error { return m }

// PolicyGetRequestValidationError is the validation error returned by
// PolicyGetRequest.Validate if the designated constraints aren't met.
type PolicyGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyGetRequestValidationError) ErrorName() string { return "PolicyGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e PolicyGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyGetRequestValidationError{}

// Validate checks the field values on PolicyGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PolicyGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyGetResponseMultiError, or nil if none found.
func (m *PolicyGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyGetResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyGetResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyGetResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicyGetResponseMultiError(errors)
	}

	return nil
}

// PolicyGetResponseMultiError is an error wrapping multiple validation errors
// returned by PolicyGetResponse.ValidateAll() if the designated constraints
// aren't met.
type PolicyGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyGetResponseMultiError) AllErrors() []error { return m }

// PolicyGetResponseValidationError is the validation error returned by
// PolicyGetResponse.Validate if the designated constraints aren't met.
type PolicyGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyGetResponseValidationError) ErrorName() string {
	return "PolicyGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyGetResponseValidationError{}

// Validate checks the field values on PolicyDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolicyDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyDeleteRequestMultiError, or nil if none found.
func (m *PolicyDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return PolicyDeleteRequestMultiError(errors)
	}

	return nil
}

// PolicyDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by PolicyDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type PolicyDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyDeleteRequestMultiError) AllErrors() []error { return m }

// PolicyDeleteRequestValidationError is the validation error returned by
// PolicyDeleteRequest.Validate if the designated constraints aren't met.
type PolicyDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyDeleteRequestValidationError) ErrorName() string {
	return "PolicyDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyDeleteRequestValidationError{}

// Validate checks the field values on PolicyDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolicyDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyDeleteResponseMultiError, or nil if none found.
func (m *PolicyDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return PolicyDeleteResponseMultiError(errors)
	}

	return nil
}

// PolicyDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by PolicyDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type PolicyDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyDeleteResponseMultiError) AllErrors() []error { return m }

// PolicyDeleteResponseValidationError is the validation error returned by
// PolicyDeleteResponse.Validate if the designated constraints aren't met.
type PolicyDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyDeleteResponseValidationError) ErrorName() string {
	return "PolicyDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyDeleteResponseValidationError{}

// Validate checks the field values on PolicyUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolicyUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyUpdateRequestMultiError, or nil if none found.
func (m *PolicyUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return PolicyUpdateRequestMultiError(errors)
	}

	return nil
}

// PolicyUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by PolicyUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type PolicyUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyUpdateRequestMultiError) AllErrors() []error { return m }

// PolicyUpdateRequestValidationError is the validation error returned by
// PolicyUpdateRequest.Validate if the designated constraints aren't met.
type PolicyUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyUpdateRequestValidationError) ErrorName() string {
	return "PolicyUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyUpdateRequestValidationError{}

// Validate checks the field values on PolicyUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolicyUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyUpdateResponseMultiError, or nil if none found.
func (m *PolicyUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyUpdateResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyUpdateResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyUpdateResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicyUpdateResponseMultiError(errors)
	}

	return nil
}

// PolicyUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by PolicyUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type PolicyUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyUpdateResponseMultiError) AllErrors() []error { return m }

// PolicyUpdateResponseValidationError is the validation error returned by
// PolicyUpdateResponse.Validate if the designated constraints aren't met.
type PolicyUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyUpdateResponseValidationError) ErrorName() string {
	return "PolicyUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyUpdateResponseValidationError{}

// Validate checks the field values on Principal with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Principal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Principal with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PrincipalMultiError, or nil
// if none found.
func (m *Principal) ValidateAll() error {
	return m.validate(true)
}

func (m *Principal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrincipalValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrincipalValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrincipalValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PrincipalMultiError(errors)
	}

	return nil
}

// PrincipalMultiError is an error wrapping multiple validation errors returned
// by Principal.ValidateAll() if the designated constraints aren't met.
type PrincipalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrincipalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrincipalMultiError) AllErrors() []error { return m }

// PrincipalValidationError is the validation error returned by
// Principal.Validate if the designated constraints aren't met.
type PrincipalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrincipalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrincipalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrincipalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrincipalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrincipalValidationError) ErrorName() string { return "PrincipalValidationError" }

// Error satisfies the builtin error interface
func (e PrincipalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrincipalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrincipalValidationError{}

// Validate checks the field values on PrincipalCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrincipalCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrincipalCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrincipalCreateRequestMultiError, or nil if none found.
func (m *PrincipalCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PrincipalCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_PrincipalCreateRequest_Id_Pattern.MatchString(m.GetId()) {
		err := PrincipalCreateRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"[a-z0-9-_\\\\./*]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrincipalCreateRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrincipalCreateRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrincipalCreateRequestValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PrincipalCreateRequestMultiError(errors)
	}

	return nil
}

// PrincipalCreateRequestMultiError is an error wrapping multiple validation
// errors returned by PrincipalCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type PrincipalCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrincipalCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrincipalCreateRequestMultiError) AllErrors() []error { return m }

// PrincipalCreateRequestValidationError is the validation error returned by
// PrincipalCreateRequest.Validate if the designated constraints aren't met.
type PrincipalCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrincipalCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrincipalCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrincipalCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrincipalCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrincipalCreateRequestValidationError) ErrorName() string {
	return "PrincipalCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PrincipalCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipalCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrincipalCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrincipalCreateRequestValidationError{}

var _PrincipalCreateRequest_Id_Pattern = regexp.MustCompile("[a-z0-9-_\\./*]+")

// Validate checks the field values on PrincipalCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrincipalCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrincipalCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrincipalCreateResponseMultiError, or nil if none found.
func (m *PrincipalCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PrincipalCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PrincipalCreateResponseValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PrincipalCreateResponseValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrincipalCreateResponseValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PrincipalCreateResponseMultiError(errors)
	}

	return nil
}

// PrincipalCreateResponseMultiError is an error wrapping multiple validation
// errors returned by PrincipalCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type PrincipalCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrincipalCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrincipalCreateResponseMultiError) AllErrors() []error { return m }

// PrincipalCreateResponseValidationError is the validation error returned by
// PrincipalCreateResponse.Validate if the designated constraints aren't met.
type PrincipalCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrincipalCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrincipalCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrincipalCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrincipalCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrincipalCreateResponseValidationError) ErrorName() string {
	return "PrincipalCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PrincipalCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipalCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrincipalCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrincipalCreateResponseValidationError{}

// Validate checks the field values on PrincipalGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrincipalGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrincipalGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrincipalGetRequestMultiError, or nil if none found.
func (m *PrincipalGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PrincipalGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return PrincipalGetRequestMultiError(errors)
	}

	return nil
}

// PrincipalGetRequestMultiError is an error wrapping multiple validation
// errors returned by PrincipalGetRequest.ValidateAll() if the designated
// constraints aren't met.
type PrincipalGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrincipalGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrincipalGetRequestMultiError) AllErrors() []error { return m }

// PrincipalGetRequestValidationError is the validation error returned by
// PrincipalGetRequest.Validate if the designated constraints aren't met.
type PrincipalGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrincipalGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrincipalGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrincipalGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrincipalGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrincipalGetRequestValidationError) ErrorName() string {
	return "PrincipalGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PrincipalGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipalGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrincipalGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrincipalGetRequestValidationError{}

// Validate checks the field values on PrincipalGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrincipalGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrincipalGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrincipalGetResponseMultiError, or nil if none found.
func (m *PrincipalGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PrincipalGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PrincipalGetResponseValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PrincipalGetResponseValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrincipalGetResponseValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PrincipalGetResponseMultiError(errors)
	}

	return nil
}

// PrincipalGetResponseMultiError is an error wrapping multiple validation
// errors returned by PrincipalGetResponse.ValidateAll() if the designated
// constraints aren't met.
type PrincipalGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrincipalGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrincipalGetResponseMultiError) AllErrors() []error { return m }

// PrincipalGetResponseValidationError is the validation error returned by
// PrincipalGetResponse.Validate if the designated constraints aren't met.
type PrincipalGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrincipalGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrincipalGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrincipalGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrincipalGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrincipalGetResponseValidationError) ErrorName() string {
	return "PrincipalGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PrincipalGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipalGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrincipalGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrincipalGetResponseValidationError{}

// Validate checks the field values on PrincipalDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrincipalDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrincipalDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrincipalDeleteRequestMultiError, or nil if none found.
func (m *PrincipalDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PrincipalDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return PrincipalDeleteRequestMultiError(errors)
	}

	return nil
}

// PrincipalDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by PrincipalDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type PrincipalDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrincipalDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrincipalDeleteRequestMultiError) AllErrors() []error { return m }

// PrincipalDeleteRequestValidationError is the validation error returned by
// PrincipalDeleteRequest.Validate if the designated constraints aren't met.
type PrincipalDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrincipalDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrincipalDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrincipalDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrincipalDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrincipalDeleteRequestValidationError) ErrorName() string {
	return "PrincipalDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PrincipalDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipalDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrincipalDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrincipalDeleteRequestValidationError{}

// Validate checks the field values on PrincipalDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrincipalDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrincipalDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrincipalDeleteResponseMultiError, or nil if none found.
func (m *PrincipalDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PrincipalDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return PrincipalDeleteResponseMultiError(errors)
	}

	return nil
}

// PrincipalDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by PrincipalDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type PrincipalDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrincipalDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrincipalDeleteResponseMultiError) AllErrors() []error { return m }

// PrincipalDeleteResponseValidationError is the validation error returned by
// PrincipalDeleteResponse.Validate if the designated constraints aren't met.
type PrincipalDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrincipalDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrincipalDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrincipalDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrincipalDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrincipalDeleteResponseValidationError) ErrorName() string {
	return "PrincipalDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PrincipalDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipalDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrincipalDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrincipalDeleteResponseValidationError{}

// Validate checks the field values on PrincipalUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrincipalUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrincipalUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrincipalUpdateRequestMultiError, or nil if none found.
func (m *PrincipalUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PrincipalUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrincipalUpdateRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrincipalUpdateRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrincipalUpdateRequestValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PrincipalUpdateRequestMultiError(errors)
	}

	return nil
}

// PrincipalUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by PrincipalUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type PrincipalUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrincipalUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrincipalUpdateRequestMultiError) AllErrors() []error { return m }

// PrincipalUpdateRequestValidationError is the validation error returned by
// PrincipalUpdateRequest.Validate if the designated constraints aren't met.
type PrincipalUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrincipalUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrincipalUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrincipalUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrincipalUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrincipalUpdateRequestValidationError) ErrorName() string {
	return "PrincipalUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PrincipalUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipalUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrincipalUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrincipalUpdateRequestValidationError{}

// Validate checks the field values on PrincipalUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrincipalUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrincipalUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrincipalUpdateResponseMultiError, or nil if none found.
func (m *PrincipalUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PrincipalUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PrincipalUpdateResponseValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PrincipalUpdateResponseValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrincipalUpdateResponseValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PrincipalUpdateResponseMultiError(errors)
	}

	return nil
}

// PrincipalUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by PrincipalUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type PrincipalUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrincipalUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrincipalUpdateResponseMultiError) AllErrors() []error { return m }

// PrincipalUpdateResponseValidationError is the validation error returned by
// PrincipalUpdateResponse.Validate if the designated constraints aren't met.
type PrincipalUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrincipalUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrincipalUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrincipalUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrincipalUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrincipalUpdateResponseValidationError) ErrorName() string {
	return "PrincipalUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PrincipalUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipalUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrincipalUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrincipalUpdateResponseValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Kind

	// no validation rules for Value

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on ResourceCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceCreateRequestMultiError, or nil if none found.
func (m *ResourceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ResourceCreateRequest_Id_Pattern.MatchString(m.GetId()) {
		err := ResourceCreateRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"[a-z0-9-_\\\\./*]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResourceCreateRequest_Kind_Pattern.MatchString(m.GetKind()) {
		err := ResourceCreateRequestValidationError{
			field:  "Kind",
			reason: "value does not match regex pattern \"[a-z0-9-_\\\\./*]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResourceCreateRequest_Value_Pattern.MatchString(m.GetValue()) {
		err := ResourceCreateRequestValidationError{
			field:  "Value",
			reason: "value does not match regex pattern \"[a-z0-9-_\\\\./*]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceCreateRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceCreateRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceCreateRequestValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceCreateRequestMultiError(errors)
	}

	return nil
}

// ResourceCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ResourceCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ResourceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceCreateRequestMultiError) AllErrors() []error { return m }

// ResourceCreateRequestValidationError is the validation error returned by
// ResourceCreateRequest.Validate if the designated constraints aren't met.
type ResourceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceCreateRequestValidationError) ErrorName() string {
	return "ResourceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceCreateRequestValidationError{}

var _ResourceCreateRequest_Id_Pattern = regexp.MustCompile("[a-z0-9-_\\./*]+")

var _ResourceCreateRequest_Kind_Pattern = regexp.MustCompile("[a-z0-9-_\\./*]+")

var _ResourceCreateRequest_Value_Pattern = regexp.MustCompile("[a-z0-9-_\\./*]+")

// Validate checks the field values on ResourceCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceCreateResponseMultiError, or nil if none found.
func (m *ResourceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceCreateResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceCreateResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceCreateResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceCreateResponseMultiError(errors)
	}

	return nil
}

// ResourceCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ResourceCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type ResourceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceCreateResponseMultiError) AllErrors() []error { return m }

// ResourceCreateResponseValidationError is the validation error returned by
// ResourceCreateResponse.Validate if the designated constraints aren't met.
type ResourceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceCreateResponseValidationError) ErrorName() string {
	return "ResourceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceCreateResponseValidationError{}

// Validate checks the field values on ResourceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceGetRequestMultiError, or nil if none found.
func (m *ResourceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ResourceGetRequestMultiError(errors)
	}

	return nil
}

// ResourceGetRequestMultiError is an error wrapping multiple validation errors
// returned by ResourceGetRequest.ValidateAll() if the designated constraints
// aren't met.
type ResourceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceGetRequestMultiError) AllErrors() []error { return m }

// ResourceGetRequestValidationError is the validation error returned by
// ResourceGetRequest.Validate if the designated constraints aren't met.
type ResourceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceGetRequestValidationError) ErrorName() string {
	return "ResourceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceGetRequestValidationError{}

// Validate checks the field values on ResourceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceGetResponseMultiError, or nil if none found.
func (m *ResourceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceGetResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceGetResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceGetResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceGetResponseMultiError(errors)
	}

	return nil
}

// ResourceGetResponseMultiError is an error wrapping multiple validation
// errors returned by ResourceGetResponse.ValidateAll() if the designated
// constraints aren't met.
type ResourceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceGetResponseMultiError) AllErrors() []error { return m }

// ResourceGetResponseValidationError is the validation error returned by
// ResourceGetResponse.Validate if the designated constraints aren't met.
type ResourceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceGetResponseValidationError) ErrorName() string {
	return "ResourceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceGetResponseValidationError{}

// Validate checks the field values on ResourceDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceDeleteRequestMultiError, or nil if none found.
func (m *ResourceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ResourceDeleteRequestMultiError(errors)
	}

	return nil
}

// ResourceDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ResourceDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ResourceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDeleteRequestMultiError) AllErrors() []error { return m }

// ResourceDeleteRequestValidationError is the validation error returned by
// ResourceDeleteRequest.Validate if the designated constraints aren't met.
type ResourceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDeleteRequestValidationError) ErrorName() string {
	return "ResourceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDeleteRequestValidationError{}

// Validate checks the field values on ResourceDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceDeleteResponseMultiError, or nil if none found.
func (m *ResourceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ResourceDeleteResponseMultiError(errors)
	}

	return nil
}

// ResourceDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ResourceDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ResourceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDeleteResponseMultiError) AllErrors() []error { return m }

// ResourceDeleteResponseValidationError is the validation error returned by
// ResourceDeleteResponse.Validate if the designated constraints aren't met.
type ResourceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDeleteResponseValidationError) ErrorName() string {
	return "ResourceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDeleteResponseValidationError{}

// Validate checks the field values on ResourceUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceUpdateRequestMultiError, or nil if none found.
func (m *ResourceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Kind

	// no validation rules for Value

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceUpdateRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceUpdateRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceUpdateRequestValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceUpdateRequestMultiError(errors)
	}

	return nil
}

// ResourceUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ResourceUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type ResourceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceUpdateRequestMultiError) AllErrors() []error { return m }

// ResourceUpdateRequestValidationError is the validation error returned by
// ResourceUpdateRequest.Validate if the designated constraints aren't met.
type ResourceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceUpdateRequestValidationError) ErrorName() string {
	return "ResourceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceUpdateRequestValidationError{}

// Validate checks the field values on ResourceUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceUpdateResponseMultiError, or nil if none found.
func (m *ResourceUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceUpdateResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceUpdateResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceUpdateResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceUpdateResponseMultiError(errors)
	}

	return nil
}

// ResourceUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by ResourceUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type ResourceUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceUpdateResponseMultiError) AllErrors() []error { return m }

// ResourceUpdateResponseValidationError is the validation error returned by
// ResourceUpdateResponse.Validate if the designated constraints aren't met.
type ResourceUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceUpdateResponseValidationError) ErrorName() string {
	return "ResourceUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceUpdateResponseValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on RoleCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleCreateRequestMultiError, or nil if none found.
func (m *RoleCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_RoleCreateRequest_Id_Pattern.MatchString(m.GetId()) {
		err := RoleCreateRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"[a-z0-9-_\\\\./*]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleCreateRequestMultiError(errors)
	}

	return nil
}

// RoleCreateRequestMultiError is an error wrapping multiple validation errors
// returned by RoleCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type RoleCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleCreateRequestMultiError) AllErrors() []error { return m }

// RoleCreateRequestValidationError is the validation error returned by
// RoleCreateRequest.Validate if the designated constraints aren't met.
type RoleCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleCreateRequestValidationError) ErrorName() string {
	return "RoleCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleCreateRequestValidationError{}

var _RoleCreateRequest_Id_Pattern = regexp.MustCompile("[a-z0-9-_\\./*]+")

// Validate checks the field values on RoleCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleCreateResponseMultiError, or nil if none found.
func (m *RoleCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleCreateResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleCreateResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleCreateResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoleCreateResponseMultiError(errors)
	}

	return nil
}

// RoleCreateResponseMultiError is an error wrapping multiple validation errors
// returned by RoleCreateResponse.ValidateAll() if the designated constraints
// aren't met.
type RoleCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleCreateResponseMultiError) AllErrors() []error { return m }

// RoleCreateResponseValidationError is the validation error returned by
// RoleCreateResponse.Validate if the designated constraints aren't met.
type RoleCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleCreateResponseValidationError) ErrorName() string {
	return "RoleCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoleCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleCreateResponseValidationError{}

// Validate checks the field values on RoleGetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleGetRequestMultiError,
// or nil if none found.
func (m *RoleGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RoleGetRequestMultiError(errors)
	}

	return nil
}

// RoleGetRequestMultiError is an error wrapping multiple validation errors
// returned by RoleGetRequest.ValidateAll() if the designated constraints
// aren't met.
type RoleGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGetRequestMultiError) AllErrors() []error { return m }

// RoleGetRequestValidationError is the validation error returned by
// RoleGetRequest.Validate if the designated constraints aren't met.
type RoleGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGetRequestValidationError) ErrorName() string { return "RoleGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e RoleGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGetRequestValidationError{}

// Validate checks the field values on RoleGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleGetResponseMultiError, or nil if none found.
func (m *RoleGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleGetResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleGetResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleGetResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoleGetResponseMultiError(errors)
	}

	return nil
}

// RoleGetResponseMultiError is an error wrapping multiple validation errors
// returned by RoleGetResponse.ValidateAll() if the designated constraints
// aren't met.
type RoleGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGetResponseMultiError) AllErrors() []error { return m }

// RoleGetResponseValidationError is the validation error returned by
// RoleGetResponse.Validate if the designated constraints aren't met.
type RoleGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGetResponseValidationError) ErrorName() string { return "RoleGetResponseValidationError" }

// Error satisfies the builtin error interface
func (e RoleGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGetResponseValidationError{}

// Validate checks the field values on RoleDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleDeleteRequestMultiError, or nil if none found.
func (m *RoleDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RoleDeleteRequestMultiError(errors)
	}

	return nil
}

// RoleDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by RoleDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type RoleDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleDeleteRequestMultiError) AllErrors() []error { return m }

// RoleDeleteRequestValidationError is the validation error returned by
// RoleDeleteRequest.Validate if the designated constraints aren't met.
type RoleDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleDeleteRequestValidationError) ErrorName() string {
	return "RoleDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleDeleteRequestValidationError{}

// Validate checks the field values on RoleDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleDeleteResponseMultiError, or nil if none found.
func (m *RoleDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RoleDeleteResponseMultiError(errors)
	}

	return nil
}

// RoleDeleteResponseMultiError is an error wrapping multiple validation errors
// returned by RoleDeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type RoleDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleDeleteResponseMultiError) AllErrors() []error { return m }

// RoleDeleteResponseValidationError is the validation error returned by
// RoleDeleteResponse.Validate if the designated constraints aren't met.
type RoleDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleDeleteResponseValidationError) ErrorName() string {
	return "RoleDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoleDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleDeleteResponseValidationError{}

// Validate checks the field values on RoleUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleUpdateRequestMultiError, or nil if none found.
func (m *RoleUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RoleUpdateRequestMultiError(errors)
	}

	return nil
}

// RoleUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by RoleUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type RoleUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleUpdateRequestMultiError) AllErrors() []error { return m }

// RoleUpdateRequestValidationError is the validation error returned by
// RoleUpdateRequest.Validate if the designated constraints aren't met.
type RoleUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleUpdateRequestValidationError) ErrorName() string {
	return "RoleUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleUpdateRequestValidationError{}

// Validate checks the field values on RoleUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleUpdateResponseMultiError, or nil if none found.
func (m *RoleUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleUpdateResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleUpdateResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleUpdateResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoleUpdateResponseMultiError(errors)
	}

	return nil
}

// RoleUpdateResponseMultiError is an error wrapping multiple validation errors
// returned by RoleUpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type RoleUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleUpdateResponseMultiError) AllErrors() []error { return m }

// RoleUpdateResponseValidationError is the validation error returned by
// RoleUpdateResponse.Validate if the designated constraints aren't met.
type RoleUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleUpdateResponseValidationError) ErrorName() string {
	return "RoleUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoleUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleUpdateResponseValidationError{}
