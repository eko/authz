// Code generated by MockGen. DO NOT EDIT.
// Source: internal/compile/compiler.go

// Package compile is a generated GoMock package.
package compile

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCompiler is a mock of Compiler interface.
type MockCompiler struct {
	ctrl     *gomock.Controller
	recorder *MockCompilerMockRecorder
}

// MockCompilerMockRecorder is the mock recorder for MockCompiler.
type MockCompilerMockRecorder struct {
	mock *MockCompiler
}

// NewMockCompiler creates a new mock instance.
func NewMockCompiler(ctrl *gomock.Controller) *MockCompiler {
	mock := &MockCompiler{ctrl: ctrl}
	mock.recorder = &MockCompilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompiler) EXPECT() *MockCompilerMockRecorder {
	return m.recorder
}

// CompilePolicy mocks base method.
func (m *MockCompiler) CompilePolicy(identifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompilePolicy", identifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompilePolicy indicates an expected call of CompilePolicy.
func (mr *MockCompilerMockRecorder) CompilePolicy(identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompilePolicy", reflect.TypeOf((*MockCompiler)(nil).CompilePolicy), identifier)
}

// CompilePrincipal mocks base method.
func (m *MockCompiler) CompilePrincipal(identifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompilePrincipal", identifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompilePrincipal indicates an expected call of CompilePrincipal.
func (mr *MockCompilerMockRecorder) CompilePrincipal(identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompilePrincipal", reflect.TypeOf((*MockCompiler)(nil).CompilePrincipal), identifier)
}

// CompileResource mocks base method.
func (m *MockCompiler) CompileResource(identifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompileResource", identifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompileResource indicates an expected call of CompileResource.
func (mr *MockCompilerMockRecorder) CompileResource(identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompileResource", reflect.TypeOf((*MockCompiler)(nil).CompileResource), identifier)
}
