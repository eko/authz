definitions:
  handler.AttributeKeyValue:
    properties:
      key:
        type: string
      value: {}
    required:
    - key
    - value
    type: object
  handler.AuthRequest:
    properties:
      password:
        example: mypassword
        type: string
      username:
        example: john.doe
        type: string
    type: object
  handler.AuthResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      token_type:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  handler.CheckRequest:
    properties:
      checks:
        items:
          $ref: '#/definitions/handler.CheckRequestQuery'
        type: array
    required:
    - checks
    type: object
  handler.CheckRequestQuery:
    properties:
      action:
        type: string
      principal:
        type: string
      resource_kind:
        type: string
      resource_value:
        type: string
    required:
    - action
    - principal
    - resource_kind
    - resource_value
    type: object
  handler.CheckResponse:
    properties:
      checks:
        items:
          $ref: '#/definitions/handler.CheckResponseQuery'
        type: array
    type: object
  handler.CheckResponseQuery:
    properties:
      action:
        type: string
      is_allowed:
        type: boolean
      principal:
        type: string
      resource_kind:
        type: string
      resource_value:
        type: string
    required:
    - action
    - principal
    - resource_kind
    - resource_value
    type: object
  handler.ClientCreateRequest:
    properties:
      name:
        example: my-client
        type: string
    required:
    - name
    type: object
  handler.CreatePolicyRequest:
    properties:
      actions:
        items:
          type: string
        type: array
      attribute_rules:
        items:
          type: string
        type: array
      id:
        type: string
      resources:
        items:
          type: string
        type: array
    required:
    - actions
    - id
    - resources
    type: object
  handler.CreatePrincipalRequest:
    properties:
      attributes:
        items:
          $ref: '#/definitions/handler.AttributeKeyValue'
        type: array
      id:
        type: string
      roles:
        items:
          type: string
        type: array
    required:
    - id
    type: object
  handler.CreateResourceRequest:
    properties:
      attributes:
        items:
          $ref: '#/definitions/handler.AttributeKeyValue'
        type: array
      id:
        type: string
      kind:
        type: string
      value:
        type: string
    required:
    - id
    - kind
    type: object
  handler.CreateRoleRequest:
    properties:
      id:
        type: string
      policies:
        items:
          type: string
        type: array
    required:
    - id
    - policies
    type: object
  handler.TokenRequest:
    properties:
      client_id:
        example: 0be4e0e0-6788-4b99-8e00-e0af5b4945b1
        type: string
      client_secret:
        example: EXCAdNZjCz0qJ_8uYA2clkxVdp_f1tm7
        type: string
      grant_type:
        example: client_credentials
        type: string
      refresh_token:
        type: string
    type: object
  handler.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  handler.UpdatePolicyRequest:
    properties:
      actions:
        items:
          type: string
        type: array
      attribute_rules:
        items:
          type: string
        type: array
      resources:
        items:
          type: string
        type: array
    required:
    - actions
    - resources
    type: object
  handler.UpdatePrincipalRequest:
    properties:
      attributes:
        items:
          $ref: '#/definitions/handler.AttributeKeyValue'
        type: array
      roles:
        items:
          type: string
        type: array
    type: object
  handler.UpdateResourceRequest:
    properties:
      attributes:
        items:
          $ref: '#/definitions/handler.AttributeKeyValue'
        type: array
      kind:
        type: string
      value:
        type: string
    required:
    - kind
    type: object
  handler.UpdateRoleRequest:
    properties:
      policies:
        items:
          type: string
        type: array
    required:
    - policies
    type: object
  handler.UserCreateRequest:
    properties:
      username:
        example: my-user
        type: string
    required:
    - username
    type: object
  model.Action:
    properties:
      created_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
    type: object
  model.Attribute:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  model.Audit:
    properties:
      action:
        type: string
      date:
        type: string
      id:
        type: integer
      is_allowed:
        type: boolean
      policy_id:
        type: string
      principal:
        type: string
      resource_kind:
        type: string
      resource_value:
        type: string
    type: object
  model.Client:
    properties:
      client_id:
        type: string
      client_secret:
        type: string
      created_at:
        type: string
      data:
        type: string
      domain:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  model.ErrorResponse:
    properties:
      error:
        type: boolean
      message:
        type: string
      validation:
        items:
          $ref: '#/definitions/model.ValidateErrorResponse'
        type: array
    type: object
  model.Policy:
    properties:
      actions:
        items:
          $ref: '#/definitions/model.Action'
        type: array
      attribute_rules:
        type: object
      created_at:
        type: string
      id:
        type: string
      resources:
        items:
          $ref: '#/definitions/model.Resource'
        type: array
      updated_at:
        type: string
    type: object
  model.Principal:
    properties:
      attributes:
        items:
          $ref: '#/definitions/model.Attribute'
        type: array
      created_at:
        type: string
      id:
        type: string
      is_locked:
        type: boolean
      roles:
        items:
          $ref: '#/definitions/model.Role'
        type: array
      updated_at:
        type: string
    type: object
  model.Resource:
    properties:
      attributes:
        items:
          $ref: '#/definitions/model.Attribute'
        type: array
      created_at:
        type: string
      id:
        type: string
      is_locked:
        type: boolean
      kind:
        type: string
      updated_at:
        type: string
      value:
        type: string
    type: object
  model.Role:
    properties:
      created_at:
        type: string
      id:
        type: string
      policies:
        items:
          $ref: '#/definitions/model.Policy'
        type: array
      updated_at:
        type: string
    type: object
  model.Stats:
    properties:
      checks_allowed_number:
        type: integer
      checks_denied_number:
        type: integer
      date:
        type: string
      id:
        type: string
    type: object
  model.User:
    properties:
      created_at:
        type: string
      password:
        description: Only used to display generated password after creation
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  model.ValidateErrorResponse:
    properties:
      field:
        type: string
      tag:
        type: string
      value:
        type: string
    type: object
info:
  contact: {}
  description: Authorization management HTTP APIs
  title: Authz API
  version: "1.0"
paths:
  /v1/actions:
    get:
      parameters:
      - description: page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 100
        description: page size
        in: query
        maximum: 1000
        minimum: 1
        name: size
        type: integer
      - description: filter on a field
        example: name:contains:something
        in: query
        name: filter
        type: string
      - description: sort field and order
        example: name:desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Action'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Lists actions
      tags:
      - Action
  /v1/actions/{identifier}:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Action'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Retrieve an action
      tags:
      - Action
  /v1/audits:
    get:
      parameters:
      - description: page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 100
        description: page size
        in: query
        maximum: 1000
        minimum: 1
        name: size
        type: integer
      - description: filter on a field
        example: kind:contains:something
        in: query
        name: filter
        type: string
      - description: sort field and order
        example: kind:desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Audit'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Retrieve audits for last days
      tags:
      - Check
  /v1/auth:
    post:
      parameters:
      - description: Authentication request
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/handler.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Authenticates a user
      tags:
      - Auth
  /v1/check:
    post:
      parameters:
      - description: Check request
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/handler.CheckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CheckResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Check if a principal has access to do action on resource
      tags:
      - Check
  /v1/clients:
    get:
      parameters:
      - description: page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 100
        description: page size
        in: query
        maximum: 1000
        minimum: 1
        name: size
        type: integer
      - description: filter on a field
        example: name:contains:something
        in: query
        name: filter
        type: string
      - description: sort field and order
        example: name:desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Client'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Lists clients
      tags:
      - Client
    post:
      parameters:
      - description: Client creation request
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/handler.ClientCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Creates a new client
      tags:
      - Client
  /v1/clients/{identifier}:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Deletes a client
      tags:
      - Client
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Client'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Retrieve a client
      tags:
      - Client
  /v1/oauth:
    get:
      responses:
        "302":
          description: Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Authenticates a user using an OAuth OpenID Connect provider
      tags:
      - Auth
  /v1/oauth/callback:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Callback of the OAuth OpenID Connect provider authentication
      tags:
      - Auth
  /v1/policies:
    get:
      parameters:
      - description: page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 100
        description: page size
        in: query
        maximum: 1000
        minimum: 1
        name: size
        type: integer
      - description: filter on a field
        example: kind:contains:something
        in: query
        name: filter
        type: string
      - description: sort field and order
        example: kind:desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Policy'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Lists policies
      tags:
      - Policy
    post:
      parameters:
      - description: Policy creation request
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/handler.CreatePolicyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Policy'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Creates a new policy
      tags:
      - Policy
  /v1/policies/{identifier}:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Policy'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Deletes a policy
      tags:
      - Policy
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Policy'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Retrieve a policy
      tags:
      - Policy
    put:
      parameters:
      - description: Policy update request
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/handler.UpdatePolicyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Policy'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Updates a policy
      tags:
      - Policy
  /v1/principals:
    get:
      parameters:
      - description: page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 100
        description: page size
        in: query
        maximum: 1000
        minimum: 1
        name: size
        type: integer
      - description: filter on a field
        example: name:contains:something
        in: query
        name: filter
        type: string
      - description: sort field and order
        example: name:desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Principal'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Lists principals
      tags:
      - Principal
    post:
      parameters:
      - description: Principal creation request
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/handler.CreatePrincipalRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Principal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Creates a new principal
      tags:
      - Principal
  /v1/principals/{identifier}:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Principal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Deletes a principal
      tags:
      - Principal
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Principal'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Retrieve a principal
      tags:
      - Principal
    put:
      parameters:
      - description: Principal update request
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/handler.UpdatePrincipalRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Principal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Updates a principal
      tags:
      - Principal
  /v1/resources:
    get:
      parameters:
      - description: page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 100
        description: page size
        in: query
        maximum: 1000
        minimum: 1
        name: size
        type: integer
      - description: filter on a field
        example: kind:contains:something
        in: query
        name: filter
        type: string
      - description: sort field and order
        example: kind:desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Resource'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Lists resources
      tags:
      - Resource
    post:
      parameters:
      - description: Resource creation request
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/handler.CreateResourceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Resource'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Creates a new resource
      tags:
      - Resource
  /v1/resources/{identifier}:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Resource'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Deletes a resource
      tags:
      - Resource
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Resource'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Retrieve a resource
      tags:
      - Resource
    put:
      parameters:
      - description: Resource update request
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateResourceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Resource'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Updates a resource
      tags:
      - Resource
  /v1/roles:
    get:
      parameters:
      - description: page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 100
        description: page size
        in: query
        maximum: 1000
        minimum: 1
        name: size
        type: integer
      - description: filter on a field
        example: kind:contains:something
        in: query
        name: filter
        type: string
      - description: sort field and order
        example: kind:desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Role'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Lists roles
      tags:
      - Role
    post:
      parameters:
      - description: Role creation request
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/handler.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Creates a new role
      tags:
      - Role
  /v1/roles/{identifier}:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Deletes a role
      tags:
      - Role
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Role'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Retrieve a role
      tags:
      - Role
    put:
      parameters:
      - description: Role update request
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Updates a role
      tags:
      - Role
  /v1/stats:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Stats'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Retrieve statistics for last days
      tags:
      - Check
  /v1/token:
    post:
      parameters:
      - description: Token request
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/handler.TokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Retrieve a client token
      tags:
      - Auth
  /v1/users:
    get:
      parameters:
      - description: page number
        example: 1
        in: query
        name: page
        type: integer
      - default: 100
        description: page size
        in: query
        maximum: 1000
        minimum: 1
        name: size
        type: integer
      - description: filter on a field
        example: name:contains:something
        in: query
        name: filter
        type: string
      - description: sort field and order
        example: name:desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Lists users
      tags:
      - User
    post:
      parameters:
      - description: User creation request
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/handler.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Creates a new user
      tags:
      - User
  /v1/users/{identifier}:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Deletes a user
      tags:
      - User
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Authentication: []
      summary: Retrieve a user
      tags:
      - User
securityDefinitions:
  Authentication:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
