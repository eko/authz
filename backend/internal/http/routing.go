package http

import (
	"strings"

	"github.com/gofiber/swagger"

	// docs are generated by Swag CLI, you have to import them.
	// replace with your own docs folder, usually "github.com/username/reponame/docs"
	_ "github.com/eko/authz/backend/internal/http/docs"
	"github.com/eko/authz/backend/internal/http/handler"

	"github.com/gofiber/fiber/v2/middleware/cors"
)

// Is to define the swagger route and the dynamic swagger routes
func (s *Server) setSwagger() {
	s.app.Get("/swagger/*", swagger.HandlerDefault)
}

//	@title						Authz API
//	@version					1.0
//	@description				Authorization management HTTP APIs
//	@securitydefinitions.apikey	Authentication
//	@in							header
//	@name						Authorization
//	@BasePath					/v1
func (s *Server) setRoutes() {
	s.app.Use(
		cors.New(cors.Config{
			AllowOrigins:     strings.Join(s.cfg.CORSAllowedDomains, ","),
			AllowMethods:     strings.Join(s.cfg.CORSAllowedMethods, ","),
			AllowHeaders:     strings.Join(s.cfg.CORSAllowedHeaders, ","),
			AllowCredentials: s.cfg.CORSAllowCredentials,
			MaxAge:           int(s.cfg.CORSCacheMaxAge.Seconds()),
		}),
	)

	base := s.app.Group("/v1")
	{
		base.Post("/check", s.handlers.Get(handler.CheckKey))

		actions := base.Group("/actions")
		actions.Get("", s.handlers.Get(handler.ActionListKey))
		actions.Get("/:identifier", s.handlers.Get(handler.ActionGetKey))

		policies := base.Group("/policies")
		policies.Post("", s.handlers.Get(handler.PolicyCreateKey))
		policies.Get("", s.handlers.Get(handler.PolicyListKey))
		policies.Get("/:identifier", s.handlers.Get(handler.PolicyGetKey))
		policies.Delete("/:identifier", s.handlers.Get(handler.PolicyDeleteKey))
		policies.Put("/:identifier", s.handlers.Get(handler.PolicyUpdateKey))

		resources := base.Group("/resources")
		resources.Post("", s.handlers.Get(handler.ResourceCreateKey))
		resources.Get("", s.handlers.Get(handler.ResourceListKey))
		resources.Get("/:identifier", s.handlers.Get(handler.ResourceGetKey))
		resources.Delete("/:identifier", s.handlers.Get(handler.ResourceDeleteKey))

		role := base.Group("/roles")
		role.Post("", s.handlers.Get(handler.RoleCreateKey))
		role.Get("", s.handlers.Get(handler.RoleListKey))
		role.Get("/:identifier", s.handlers.Get(handler.RoleGetKey))
		role.Delete("/:identifier", s.handlers.Get(handler.RoleDeleteKey))
		role.Put("/:identifier", s.handlers.Get(handler.RoleUpdateKey))

		principals := base.Group("/principals")
		principals.Post("", s.handlers.Get(handler.PrincipalCreateKey))
		principals.Get("", s.handlers.Get(handler.PrincipalListKey))
		principals.Get("/:identifier", s.handlers.Get(handler.PrincipalGetKey))
		principals.Delete("/:identifier", s.handlers.Get(handler.PrincipalDeleteKey))
		principals.Put("/:identifier", s.handlers.Get(handler.PrincipalUpdateKey))
	}
}
