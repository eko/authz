// Code generated by MockGen. DO NOT EDIT.
// Source: internal/event/dispatcher.go

// Package event is a generated GoMock package.
package event

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDispatcher is a mock of Dispatcher interface.
type MockDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcherMockRecorder
}

// MockDispatcherMockRecorder is the mock recorder for MockDispatcher.
type MockDispatcherMockRecorder struct {
	mock *MockDispatcher
}

// NewMockDispatcher creates a new mock instance.
func NewMockDispatcher(ctrl *gomock.Controller) *MockDispatcher {
	mock := &MockDispatcher{ctrl: ctrl}
	mock.recorder = &MockDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDispatcher) EXPECT() *MockDispatcherMockRecorder {
	return m.recorder
}

// Dispatch mocks base method.
func (m *MockDispatcher) Dispatch(eventType EventType, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", eventType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockDispatcherMockRecorder) Dispatch(eventType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockDispatcher)(nil).Dispatch), eventType, data)
}

// Subscribe mocks base method.
func (m *MockDispatcher) Subscribe(eventType EventType) chan *Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", eventType)
	ret0, _ := ret[0].(chan *Event)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockDispatcherMockRecorder) Subscribe(eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockDispatcher)(nil).Subscribe), eventType)
}

// Unsubscribe mocks base method.
func (m *MockDispatcher) Unsubscribe(eventType EventType, eventChanToClose chan *Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", eventType, eventChanToClose)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockDispatcherMockRecorder) Unsubscribe(eventType, eventChanToClose interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockDispatcher)(nil).Unsubscribe), eventType, eventChanToClose)
}
