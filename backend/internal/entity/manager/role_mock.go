// Code generated by MockGen. DO NOT EDIT.
// Source: internal/entity/manager/role.go

// Package manager is a generated GoMock package.
package manager

import (
	reflect "reflect"

	model "github.com/eko/authz/backend/internal/entity/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRole is a mock of Role interface.
type MockRole struct {
	ctrl     *gomock.Controller
	recorder *MockRoleMockRecorder
}

// MockRoleMockRecorder is the mock recorder for MockRole.
type MockRoleMockRecorder struct {
	mock *MockRole
}

// NewMockRole creates a new mock instance.
func NewMockRole(ctrl *gomock.Controller) *MockRole {
	mock := &MockRole{ctrl: ctrl}
	mock.recorder = &MockRoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRole) EXPECT() *MockRoleMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRole) Create(identifier string, policies []string) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", identifier, policies)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRoleMockRecorder) Create(identifier, policies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRole)(nil).Create), identifier, policies)
}

// Delete mocks base method.
func (m *MockRole) Delete(identifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", identifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleMockRecorder) Delete(identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRole)(nil).Delete), identifier)
}

// GetRepository mocks base method.
func (m *MockRole) GetRepository() RoleRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository")
	ret0, _ := ret[0].(RoleRepository)
	return ret0
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockRoleMockRecorder) GetRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockRole)(nil).GetRepository))
}

// Update mocks base method.
func (m *MockRole) Update(identifier string, policies []string) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", identifier, policies)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRoleMockRecorder) Update(identifier, policies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRole)(nil).Update), identifier, policies)
}
