// Code generated by MockGen. DO NOT EDIT.
// Source: internal/entity/manager/policy.go

// Package manager is a generated GoMock package.
package manager

import (
	reflect "reflect"

	model "github.com/eko/authz/backend/internal/entity/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPolicy is a mock of Policy interface.
type MockPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyMockRecorder
}

// MockPolicyMockRecorder is the mock recorder for MockPolicy.
type MockPolicyMockRecorder struct {
	mock *MockPolicy
}

// NewMockPolicy creates a new mock instance.
func NewMockPolicy(ctrl *gomock.Controller) *MockPolicy {
	mock := &MockPolicy{ctrl: ctrl}
	mock.recorder = &MockPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicy) EXPECT() *MockPolicyMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPolicy) Create(identifier string, resources, actions, attributeRules []string) (*model.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", identifier, resources, actions, attributeRules)
	ret0, _ := ret[0].(*model.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPolicyMockRecorder) Create(identifier, resources, actions, attributeRules interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPolicy)(nil).Create), identifier, resources, actions, attributeRules)
}

// Delete mocks base method.
func (m *MockPolicy) Delete(identifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", identifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPolicyMockRecorder) Delete(identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPolicy)(nil).Delete), identifier)
}

// GetRepository mocks base method.
func (m *MockPolicy) GetRepository() PolicyRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository")
	ret0, _ := ret[0].(PolicyRepository)
	return ret0
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockPolicyMockRecorder) GetRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockPolicy)(nil).GetRepository))
}

// Update mocks base method.
func (m *MockPolicy) Update(identifier string, resources, actions, attributeRules []string) (*model.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", identifier, resources, actions, attributeRules)
	ret0, _ := ret[0].(*model.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPolicyMockRecorder) Update(identifier, resources, actions, attributeRules interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPolicy)(nil).Update), identifier, resources, actions, attributeRules)
}
