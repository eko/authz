// Code generated by MockGen. DO NOT EDIT.
// Source: internal/entity/manager/attribute.go

// Package manager is a generated GoMock package.
package manager

import (
	reflect "reflect"

	model "github.com/eko/authz/backend/internal/entity/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAttribute is a mock of Attribute interface.
type MockAttribute struct {
	ctrl     *gomock.Controller
	recorder *MockAttributeMockRecorder
}

// MockAttributeMockRecorder is the mock recorder for MockAttribute.
type MockAttributeMockRecorder struct {
	mock *MockAttribute
}

// NewMockAttribute creates a new mock instance.
func NewMockAttribute(ctrl *gomock.Controller) *MockAttribute {
	mock := &MockAttribute{ctrl: ctrl}
	mock.recorder = &MockAttributeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttribute) EXPECT() *MockAttributeMockRecorder {
	return m.recorder
}

// GetRepository mocks base method.
func (m *MockAttribute) GetRepository() AttributeRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository")
	ret0, _ := ret[0].(AttributeRepository)
	return ret0
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockAttributeMockRecorder) GetRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockAttribute)(nil).GetRepository))
}

// MapToSlice mocks base method.
func (m *MockAttribute) MapToSlice(attributes map[string]any) ([]*model.Attribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapToSlice", attributes)
	ret0, _ := ret[0].([]*model.Attribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapToSlice indicates an expected call of MapToSlice.
func (mr *MockAttributeMockRecorder) MapToSlice(attributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapToSlice", reflect.TypeOf((*MockAttribute)(nil).MapToSlice), attributes)
}
