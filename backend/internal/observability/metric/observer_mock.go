// Code generated by MockGen. DO NOT EDIT.
// Source: internal/observability/metric/observer.go

// Package metric is a generated GoMock package.
package metric

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockObserver is a mock of Observer interface.
type MockObserver struct {
	ctrl     *gomock.Controller
	recorder *MockObserverMockRecorder
}

// MockObserverMockRecorder is the mock recorder for MockObserver.
type MockObserverMockRecorder struct {
	mock *MockObserver
}

// NewMockObserver creates a new mock instance.
func NewMockObserver(ctrl *gomock.Controller) *MockObserver {
	mock := &MockObserver{ctrl: ctrl}
	mock.recorder = &MockObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObserver) EXPECT() *MockObserverMockRecorder {
	return m.recorder
}

// ObserveCheckCounter mocks base method.
func (m *MockObserver) ObserveCheckCounter(resourceKind string, isAllowed bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveCheckCounter", resourceKind, isAllowed)
}

// ObserveCheckCounter indicates an expected call of ObserveCheckCounter.
func (mr *MockObserverMockRecorder) ObserveCheckCounter(resourceKind, isAllowed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveCheckCounter", reflect.TypeOf((*MockObserver)(nil).ObserveCheckCounter), resourceKind, isAllowed)
}

// ObserveItemCreatedCounter mocks base method.
func (m *MockObserver) ObserveItemCreatedCounter(itemType, action string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveItemCreatedCounter", itemType, action)
}

// ObserveItemCreatedCounter indicates an expected call of ObserveItemCreatedCounter.
func (mr *MockObserverMockRecorder) ObserveItemCreatedCounter(itemType, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveItemCreatedCounter", reflect.TypeOf((*MockObserver)(nil).ObserveItemCreatedCounter), itemType, action)
}
